// <auto-generated />
using System;
using AuthDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthDemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190125030729_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthDemo.Models.AccountDetail", b =>
                {
                    b.Property<int>("AccountDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountDetailId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerAccountId");

                    b.Property<int>("DayOfWeekNumber");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnName("EffectiveEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnName("EffectiveStartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTimeInMinutes")
                        .HasColumnName("EndTimeInMinutes")
                        .HasColumnType("time");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsVisible")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<TimeSpan>("StartTimeInMinutes")
                        .HasColumnName("StartTimeInMinutes")
                        .HasColumnType("time");

                    b.HasKey("AccountDetailId")
                        .HasName("PrimaryKey_AccountDetailId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("AuthDemo.Models.AccountRate", b =>
                {
                    b.Property<int>("AccountRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountRateId")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerAccountId");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnName("EffectiveEndDate");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnName("EffectiveStartDate");

                    b.Property<decimal>("RatePerHour")
                        .HasColumnName("RatePerHour")
                        .HasColumnType("DECIMAL(6,2)");

                    b.HasKey("AccountRateId")
                        .HasName("PrimaryKey_AccountRateId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("AccountRates");
                });

            modelBuilder.Entity("AuthDemo.Models.CustomerAccount", b =>
                {
                    b.Property<int>("CustomerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerAccountId")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("AccountName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("NVARCHAR(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CreatedById");

                    b.Property<bool>("IsVisible")
                        .HasColumnName("IsVisible")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("UpdatedById");

                    b.HasKey("CustomerAccountId")
                        .HasName("PrimaryKey_CustomerAccountId");

                    b.HasIndex("AccountName")
                        .IsUnique()
                        .HasName("CustomerAccount_AccountName_UniqueConstraint");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("AuthDemo.Models.InstructorAccount", b =>
                {
                    b.Property<int>("InstructorAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InstructorAccountId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("NVARCHAR(4000)");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnName("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnName("EffectiveEndDate");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnName("EffectiveStartDate");

                    b.Property<int>("InstructorId")
                        .HasColumnName("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsCurrent")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("WageRate")
                        .HasColumnName("WageRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("InstructorAccountId")
                        .HasName("PrimaryKey_InstructorAccounttId");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAccounts");
                });

            modelBuilder.Entity("AuthDemo.Models.SessionSynopsis", b =>
                {
                    b.Property<int>("SessionSynopsisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SessionSynopsisId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsVisible")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SessionSynopsisName")
                        .IsRequired()
                        .HasColumnName("SessionSynopsisName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("UpdatedById");

                    b.HasKey("SessionSynopsisId")
                        .HasName("PrimaryKey_SessionSynopsisId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SessionSynopsisName")
                        .IsUnique()
                        .HasName("SessionSynopsis_SessionSynopsisName_UniqueConstraint");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SessionSynopses");
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheet", b =>
                {
                    b.Property<int>("TimeSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TimeSheetId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int?>("ApprovedById")
                        .IsRequired();

                    b.Property<int>("CheckedById");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CreatedById");

                    b.Property<int>("InstructorId");

                    b.Property<DateTime>("MonthAndYear")
                        .HasColumnName("MonthAndYear");

                    b.Property<decimal>("RatePerHour")
                        .HasColumnName("RatePerHour")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("UpdatedById")
                        .HasColumnName("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedAndSubmittedAt")
                        .HasColumnName("VerifiedAndSubmittedAt");

                    b.HasKey("TimeSheetId")
                        .HasName("PrimaryKey_TimeSheetId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheetDetail", b =>
                {
                    b.Property<int>("TimeSheetDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TimeSheetDetailId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountDetailId");

                    b.Property<DateTime>("DateOfLesson");

                    b.Property<bool>("IsReplacementInstructor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsReplacementInstructor")
                        .HasDefaultValue(false);

                    b.Property<int>("OfficialTimeInMinutes")
                        .HasColumnName("OfficialTimeInMinutes");

                    b.Property<int>("OfficialTimeOutMinutes")
                        .HasColumnName("OfficialTimeOutMinutes");

                    b.Property<string>("SessionSynopsisNames")
                        .IsRequired()
                        .HasColumnName("SessionSynopsisNames")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<int>("TimeInInMinutes");

                    b.Property<int>("TimeOutInMinutes");

                    b.Property<int>("TimeSheetId");

                    b.Property<decimal>("WageRatePerHour")
                        .HasColumnName("WageRatePerHour")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("TimeSheetDetailId")
                        .HasName("PrimaryKey_TimeSheetDetailId");

                    b.HasIndex("AccountDetailId");

                    b.HasIndex("TimeSheetId");

                    b.ToTable("TimeSheetDetails");
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheetDetailSignature", b =>
                {
                    b.Property<int>("TimeSheetDetailSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TimeSheetDetailSignatureId")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Signature")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("TimeSheetIDetailId");

                    b.HasKey("TimeSheetDetailSignatureId")
                        .HasName("PrimaryKey_TimeSheetSignatureId");

                    b.HasIndex("TimeSheetIDetailId")
                        .IsUnique();

                    b.ToTable("TimeSheetDetailSignature");
                });

            modelBuilder.Entity("AuthDemo.Models.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserInfoId")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FullName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LoginUserName")
                        .IsRequired()
                        .HasColumnName("LoginUserName")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("PasswordHash")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("PasswordSalt")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("Role")
                        .HasColumnType("VARCHAR(10)");

                    b.HasKey("UserInfoId")
                        .HasName("PrimaryKey_UserInfoId");

                    b.HasIndex("LoginUserName")
                        .IsUnique()
                        .HasName("UserInfo_LoginUserName_UniqueConstraint");

                    b.ToTable("UserInfo");

                    b.HasData(
                        new { UserInfoId = 1, Email = "KENNY@FAIRYSCHOOL.COM", FullName = "KENNY", IsActive = true, LoginUserName = "88881", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Admin" },
                        new { UserInfoId = 2, Email = "JULIET@FAIRYSCHOOL.COM", FullName = "JULIET", IsActive = true, LoginUserName = "88882", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Admin" },
                        new { UserInfoId = 3, Email = "RANDY@HOTINSTRUCTOR.COM", FullName = "RANDY", IsActive = true, LoginUserName = "88883", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Instructor" },
                        new { UserInfoId = 4, Email = "THOMAS@HOTINSTRUCTOR.COM", FullName = "THOMAS", IsActive = true, LoginUserName = "88884", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Instructor" },
                        new { UserInfoId = 5, Email = "BEN@HOTINSTRUCTOR.COM", FullName = "BEN", IsActive = true, LoginUserName = "88885", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Instructor" },
                        new { UserInfoId = 6, Email = "GABRIEL@HOTINSTRUCTOR.COM", FullName = "GABRIEL", IsActive = true, LoginUserName = "88886", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Instructor" },
                        new { UserInfoId = 7, Email = "FRED@HOTINSTRUCTOR.COM", FullName = "FRED", IsActive = true, LoginUserName = "88887", PasswordHash = new byte[] { 46, 234, 10, 145, 31, 176, 177, 66, 179, 216, 85, 46, 136, 252, 53, 100, 27, 216, 2, 243, 114, 106, 78, 161, 216, 26, 104, 144, 51, 186, 254, 51, 208, 241, 222, 102, 37, 188, 9, 25, 195, 252, 227, 76, 136, 31, 151, 46, 68, 90, 42, 34, 18, 47, 164, 102, 239, 25, 149, 133, 186, 96, 47, 4 }, PasswordSalt = new byte[] { 204, 71, 141, 0, 26, 173, 212, 191, 79, 191, 52, 19, 188, 32, 120, 90, 169, 134, 19, 64, 140, 129, 201, 24, 30, 169, 120, 111, 69, 217, 93, 229, 192, 178, 5, 30, 127, 110, 170, 123, 28, 17, 192, 170, 21, 144, 46, 174, 33, 68, 60, 75, 219, 1, 85, 245, 222, 44, 100, 175, 25, 94, 82, 167, 125, 31, 231, 54, 48, 188, 148, 80, 122, 88, 43, 235, 242, 88, 79, 66, 164, 4, 122, 35, 53, 140, 73, 55, 237, 108, 80, 1, 126, 166, 40, 209, 161, 189, 217, 163, 88, 212, 183, 208, 180, 79, 210, 54, 119, 90, 114, 26, 212, 166, 43, 41, 225, 182, 191, 53, 35, 65, 173, 72, 214, 41, 37, 21 }, Role = "Instructor" }
                    );
                });

            modelBuilder.Entity("AuthDemo.Models.AccountDetail", b =>
                {
                    b.HasOne("AuthDemo.Models.CustomerAccount", "CustomerAccount")
                        .WithMany("AccountDetails")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AuthDemo.Models.AccountRate", b =>
                {
                    b.HasOne("AuthDemo.Models.CustomerAccount", "CustomerAccount")
                        .WithMany("AccountRates")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AuthDemo.Models.CustomerAccount", b =>
                {
                    b.HasOne("AuthDemo.Models.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AuthDemo.Models.UserInfo", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AuthDemo.Models.InstructorAccount", b =>
                {
                    b.HasOne("AuthDemo.Models.CustomerAccount", "CustomerAccount")
                        .WithMany("InstructorAccounts")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AuthDemo.Models.UserInfo", "Instructor")
                        .WithMany("InstructorAccounts")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AuthDemo.Models.SessionSynopsis", b =>
                {
                    b.HasOne("AuthDemo.Models.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AuthDemo.Models.UserInfo", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheet", b =>
                {
                    b.HasOne("AuthDemo.Models.UserInfo", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AuthDemo.Models.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AuthDemo.Models.UserInfo", "Instructor")
                        .WithMany("TimeSheets")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AuthDemo.Models.UserInfo", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheetDetail", b =>
                {
                    b.HasOne("AuthDemo.Models.AccountDetail", "AccountDetail")
                        .WithMany("TimeSheetDetails")
                        .HasForeignKey("AccountDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AuthDemo.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeSheetDetails")
                        .HasForeignKey("TimeSheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AuthDemo.Models.TimeSheetDetailSignature", b =>
                {
                    b.HasOne("AuthDemo.Models.TimeSheetDetail", "TimeSheetDetail")
                        .WithOne("TimeSheetDetailSignature")
                        .HasForeignKey("AuthDemo.Models.TimeSheetDetailSignature", "TimeSheetIDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
